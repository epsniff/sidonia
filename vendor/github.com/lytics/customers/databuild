#! /bin/sh
#  
# if LIOENV is not set, then load, if it is set then we have already
# loaded this and don't want to reload, allowing overrides
if [ "$LIOENV" = "" ] ; then
  . $HOME/.lyticsenv
fi

usage() {
  cat << EOT

    This is the Lytics Run Data helper

    databuild CMD [options]

    # options
      -r        # ??
      -e        # env  [prod,pie,devec2]

    App Commands (takes -e and -l options) ==========================

      databuild rebuild          # deploy queries, start

EOT
}

# starts from customer/qry

CURDIR=`pwd`
LOGLEVEL="debug"
REBUILD="all"
LENV=$LIOENV               # LioEnv override
DEST=$SALTM                # destination server on local/current env
CMD=$1 
shift 1
if [ $# -ne "0" ] ; then
  while [ $# -gt 0 ]; do
    echo "args = $1  $1"
      case $1 in
          -e) LENV=$2;                                    shift 2 ;;
          -b) BUILD="build";                              shift 1 ;;
          --help) CMD="--help"                            shift 1 ;;
          -l) LOGLEVEL=$2;                                shift 2 ;;
          *)         echo "$0: Unrecognized option: $2" >&2; exit 1;
      esac
  done
fi


# # 2. set the lio api  (choose yours)
# export LIOAPI="http://localhost:5353"
# export LIOAPI="http://192.168.1.107:5353"
# export LIOAPI="http://api.dev.lytics.io"
# export LIOAPI="http://api.lytics.io"
# export LIOAPI="http://betaapi.lytics.io"
# case $LENV in
#   "prod")
#     export LIOAPI="http://betaapi.lytics.io"
#     DEST=ec2-184-73-48-210.compute-1.amazonaws.com
#     ;;
#   "devec2")
#     export LIOAPI="http://api.dev.lytics.io"
#     ;;
#   "pie")
#     export LIOAPI="http://192.168.1.107:5353"
#     ;;
# esac

if [ "$LIOAPI" = "" ]; then
  echo "Must have set LIOAPI"
  exit 1
fi
if [ "$LIOADMINKEY" = "" ]; then
  echo "Must have set LIOADMINKEY"
  exit 1
fi


builddata() {
  echo "Running Sync Queries and rebuild"
  ./sync.sh public
  ./sync.sh athletepath 
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==10
  ./sync.sh lyticsdev  
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==12
}

buildalldata() {
  echo "Running kafka backup and copy to s3"
  # # 4. Sync Queries for accounts and start data processing
  ./sync.sh public  #you must first load public queries
  ./sync.sh athletepath 
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==10
  #http -v POST $LIOAPI/api/work/_streamstats access_token==$LIOADMINKEY aid==10

  ./sync.sh lyticsdev  
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==12
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==12

  ./sync.sh target 
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1284
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1284
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1280
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1280

  ./sync.sh mindjet
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1263
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1263

  ./sync.sh directv
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1267
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1296

  ./sync.sh vadio
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1246
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1246


  ./sync.sh dart  # stublisher
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1266
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1266

  ./sync.sh segmentio  
  http -v POST $LIOAPI/api/work/_qryrebuild key==$LIOADMINKEY aid==1289
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1289

  #./sync.sh eroi  
  #http -v POST $LIOAPI/api/_qryrebuild key==$LIOADMINKEY aid==1281
  #http -v POST $LIOAPI/api/work/_streamstats key==$LIOADMINKEY aid==1281
  # #sync.sh all
  ./sync.sh calise  
  http -v POST $LIOAPI/api/_qryrebuild key==$LIOADMINKEY aid==1297
}


echo "CMD=$CMD LIOHM=$LIOHM  LIOENV=$LIOENV\n\n"

case $CMD in
  "rebuild")
    #if [ "$REBUILD" = "all" ] ; then
    #fi

    # 1) we first log on to salt master, and run a script there 
    # that sends out salt commands to stop eddy, nuke it, remove queires
    # archive segments
    ssh ubuntu@$DEST "sudo /home/ubuntu/lio/bin/saltrun datarebuild"
    # 2) then we upload workflows, providers, services
    cd $LIOHM/data 
    ./sync_data.py
    
    # 3) then we upload queries
    cd $CURDIR/qry 
    builddata 

    #4) then we log back on to salt master and start eddymaster, worker 
    # and restore segments
    cd $CURDIR
    ssh ubuntu@$DEST "sudo /home/ubuntu/lio/bin/saltrun datastart"
    ;;
  "--help" | "help")
    usage
    ;;
  *)
    echo "ERROR, no command"
    usage
    return 1 ;;
esac 


